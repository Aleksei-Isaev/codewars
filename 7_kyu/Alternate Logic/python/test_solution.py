import pytest

from solution import alt_or


data = [
    ([], None),
    ([False, False, False, False, False, False], False),
    ([False, False, False, False, False, True], True),
    ([False, False, False, False, True, False], True),
    ([False, False, False, False, True, True], True),
    ([False, False, False, True, False, False], True),
    ([False, False, False, True, False, True], True),
    ([False, False, False, True, True, False], True),
    ([False, False, False, True, True, True], True),
    ([False, False, True, False, False, False], True),
    ([False, False, True, False, False, True], True),
    ([False, False, True, False, True, False], True),
    ([False, False, True, False, True, True], True),
    ([False, False, True, True, False, False], True),
    ([False, False, True, True, False, True], True),
    ([False, False, True, True, True, False], True),
    ([False, False, True, True, True, True], True),
    ([False, True, False, False, False, False], True),
    ([False, True, False, False, False, True], True),
    ([False, True, False, False, True, False], True),
    ([False, True, False, False, True, True], True),
    ([False, True, False, True, False, False], True),
    ([False, True, False, True, False, True], True),
    ([False, True, False, True, True, False], True),
    ([False, True, False, True, True, True], True),
    ([False, True, True, False, False, False], True),
    ([False, True, True, False, False, True], True),
    ([False, True, True, False, True, False], True),
    ([False, True, True, False, True, True], True),
    ([False, True, True, True, False, False], True),
    ([False, True, True, True, False, True], True),
    ([False, True, True, True, True, False], True),
    ([False, True, True, True, True, True], True),
    ([True, False, False, False, False, False], True),
    ([True, False, False, False, False, True], True),
    ([True, False, False, False, True, False], True),
    ([True, False, False, False, True, True], True),
    ([True, False, False, True, False, False], True),
    ([True, False, False, True, False, True], True),
    ([True, False, False, True, True, False], True),
    ([True, False, False, True, True, True], True),
    ([True, False, True, False, False, False], True),
    ([True, False, True, False, False, True], True),
    ([True, False, True, False, True, False], True),
    ([True, False, True, False, True, True], True),
    ([True, False, True, True, False, False], True),
    ([True, False, True, True, False, True], True),
    ([True, False, True, True, True, False], True),
    ([True, False, True, True, True, True], True),
    ([True, True, False, False, False, False], True),
    ([True, True, False, False, False, True], True),
    ([True, True, False, False, True, False], True),
    ([True, True, False, False, True, True], True),
    ([True, True, False, True, False, False], True),
    ([True, True, False, True, False, True], True),
    ([True, True, False, True, True, False], True),
    ([True, True, False, True, True, True], True),
    ([True, True, True, False, False, False], True),
    ([True, True, True, False, False, True], True),
    ([True, True, True, False, True, False], True),
    ([True, True, True, False, True, True], True),
    ([True, True, True, True, False, False], True),
    ([True, True, True, True, False, True], True),
    ([True, True, True, True, True, False], True),
    ([True, True, True, True, True, True], True),
    ([False, False, False, False, False], False),
    ([False, False, False, False, True], True),
    ([False, False, False, True, False], True),
    ([False, False, False, True, True], True),
    ([False, False, True, False, False], True),
    ([False, False, True, False, True], True),
    ([False, False, True, True, False], True),
    ([False, False, True, True, True], True),
    ([False, True, False, False, False], True),
    ([False, True, False, False, True], True),
    ([False, True, False, True, False], True),
    ([False, True, False, True, True], True),
    ([False, True, True, False, False], True),
    ([False, True, True, False, True], True),
    ([False, True, True, True, False], True),
    ([False, True, True, True, True], True),
    ([True, False, False, False, False], True),
    ([True, False, False, False, True], True),
    ([True, False, False, True, False], True),
    ([True, False, False, True, True], True),
    ([True, False, True, False, False], True),
    ([True, False, True, False, True], True),
    ([True, False, True, True, False], True),
    ([True, False, True, True, True], True),
    ([True, True, False, False, False], True),
    ([True, True, False, False, True], True),
    ([True, True, False, True, False], True),
    ([True, True, False, True, True], True),
    ([True, True, True, False, False], True),
    ([True, True, True, False, True], True),
    ([True, True, True, True, False], True),
    ([True, True, True, True, True], True),
    ([False, False, False, False], False),
    ([False, False, False, True], True),
    ([False, False, True, False], True),
    ([False, False, True, True], True),
    ([False, True, False, False], True),
    ([False, True, False, True], True),
    ([False, True, True, False], True),
    ([False, True, True, True], True),
    ([True, False, False, False], True),
    ([True, False, False, True], True),
    ([True, False, True, False], True),
    ([True, False, True, True], True),
    ([True, True, False, False], True),
    ([True, True, False, True], True),
    ([True, True, True, False], True),
    ([True, True, True, True], True),
    ([False, False, False], False),
    ([False, False, True], True),
    ([False, True, False], True),
    ([False, True, True], True),
    ([True, False, False], True),
    ([True, False, True], True),
    ([True, True, False], True),
    ([True, True, True], True),
    ([False, False], False),
    ([False, True], True),
    ([True, False], True),
    ([True, True], True),
    ([False], False),
    ([True], True),
]


@pytest.mark.parametrize(
    "lst, result", data
)
def test_alt_or(lst, result):
    assert alt_or(lst) is result
